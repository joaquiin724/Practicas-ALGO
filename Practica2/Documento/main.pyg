      int maxSubArray(const int * const arr, int low, int high, int threshold) {
            if (high - low + 1 <= threshold) {
                return kadane(arr, low, high);
            }

            int mid = low + (high - low) / 2;

            int leftSum = maxSubArray(arr, low, mid, threshold);
            int rightSum = maxSubArray(arr, mid + 1, high, threshold);

            int crossLeftSum = numeric_limits<int>::min();
            int crossRightSum = numeric_limits<int>::min();
            int sum = 0;

            for (int i = mid; i >= low; --i) {
                sum += arr[i];
                crossLeftSum = max(crossLeftSum, sum);
            }

            sum = 0;
            for (int i = mid + 1; i <= high; ++i) {
                sum += arr[i];
                crossRightSum = max(crossRightSum, sum);
            }

            int crossSum = crossLeftSum + crossRightSum;

            return max(max(leftSum, rightSum), crossSum);
